<?php
/**
 * Initialize the custom theme options.
 */
add_action( 'init', 'custom_theme_options' );

/**
 * Build the custom settings & update OptionTree.
 */
function custom_theme_options() {
  
  /* OptionTree is not loaded yet, or this is not an admin request */
  if ( ! function_exists( 'ot_settings_id' ) || ! is_admin() )
    return false;
    
  /**
   * Get a copy of the saved settings array. 
   */
  $saved_settings = get_option( ot_settings_id(), array() );
  
  /**
   * Custom settings array that will eventually be 
   * passes to the OptionTree Settings API Class.
   */
  $custom_settings = array( 
    'contextual_help' => array( 
      'sidebar'       => ''
    ),
    'sections'        => array( 
      array(
        'id'          => 'general',
        'title'       => esc_html__( 'General Options', 'bitz' )
      ),
      array(
        'id'          => 'header_options',
        'title'       => esc_html__( 'Header Options', 'bitz' )
      ),
      array(
        'id'          => 'color_options',
        'title'       => esc_html__( 'Content Colors', 'bitz' )
      ),
      array(
        'id'          => 'typography',
        'title'       => esc_html__( 'Typography', 'bitz' )
      ),
      array(
        'id'          => 'footer_options',
        'title'       => esc_html__( 'Footer', 'bitz' )
      ),
      array(
        'id'          => 'articles_section',
        'title'       => esc_html__( 'Single Post', 'bitz' )
      ),
      array(
        'id'          => 'blog_section',
        'title'       => esc_html__( 'Blog  Options', 'bitz' )
      ),
      array(
        'id'          => 'category_style_tab',
        'title'       => esc_html__( 'Categories', 'bitz' )
      ),
      array(
        'id'          => 'woocommerce',
        'title'       => esc_html__( 'WooCommerce', 'bitz' )
      ),
      array(
        'id'          => 'custom_css',
        'title'       => esc_html__( 'Custom CSS', 'bitz' )
      )
    ),
    'settings'        => array( 
      array(
        'id'          => 'primary_tab',
        'label'       => esc_html__( 'Primary', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'accent_color',
        'label'       => esc_html__( 'Theme accent color', 'bitz' ),
        'desc'        => esc_html__( 'This will be general color scheme for your website. Click input field for color picker.', 'bitz' ),
        'std'         => '#009eed',
        'type'        => 'colorpicker',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'layout_style',
        'label'       => esc_html__( 'Layout style', 'bitz' ),
		'desc'        => sprintf (esc_html_x( '1. Full width layout %1$s 2. Boxed layout', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => 'full-width',
        'type'        => 'radio-image',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'body_background',
        'label'       => esc_html__( 'Body background', 'bitz' ),
        'desc'        => esc_html__( 'Choose body background for boxed layout.', 'bitz' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'layout_style:is(boxed)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'content_width',
        'label'       => esc_html__( 'Content width', 'bitz' ),
        'desc'        => esc_html__( 'This setting will apply selected layout width to your website.', 'bitz' ),
        'std'         => '1200',
        'type'        => 'radio',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => '980',
            'label'       => esc_html__( '980px', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '1100',
            'label'       => esc_html__( '1100px', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '1200',
            'label'       => esc_html__( '1200px', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '1400',
            'label'       => esc_html__( '1400px', 'bitz' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'sticky_sidebar',
        'label'       => esc_html__( 'Sticky sidebar', 'bitz' ),
        'desc'        => esc_html__( 'If enabled, sidebar will always be visible while you scroll.', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'scroll_to_top_button',
        'label'       => esc_html__( 'Scroll to top button', 'bitz' ),
        'desc'        => esc_html__( 'Enable or disable "To Top" button when you scroll down.', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'srcset_for_images',
        'label'       => esc_html__( 'Enable srcset attribute for images', 'hush' ),
        'desc'        => esc_html__( 'This will enable srcset for images and create two more image sizes. Read more in theme documentation.', 'bitz' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'default_header_tab',
        'label'       => esc_html__( 'General', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sticky_header',
        'label'       => esc_html__( 'Sticky header', 'bitz' ),
        'desc'        => esc_html__( 'Do you want a header to stick to top while you scroll?', 'bitz' ),
        'std'         => 'sticky_header_smart',
        'type'        => 'radio',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'sticky_header_smart',
            'label'       => esc_html__( 'Smart header (sticky only when scrolling up)', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => 'sticky_header',
            'label'       => esc_html__( 'Always sticky header', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => 'no_sticky',
            'label'       => esc_html__( 'Disable sticky header', 'bitz' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'header_style',
        'label'       => esc_html__( 'Header layout', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Header layouts have following structure: %1$s%1$s %2$sDefault%3$s - Top bar/logo and header widget area/menu bar with widget area. %1$s%1$s %2$sMenu bar%3$s - Top bar/menu bar with logo and widget area. %1$s%1$s %2$sInverse default%3$s - Top bar/menu bar with widget area/logo and header widget area. %1$s%1$s %2$sCentred header%3$s - Top bar/centred logo and header widget area/menu bar with widget area. %1$s%1$s %2$sCentred header and menu%3$s - Top bar/centred logo and header widget area/centered menu bar with. %1$s%1$s %2$sFull width menu bar%3$s - Full width top bar/full width menu bar with logo and widget area. %1$s%1$s', '%1$s stands for line break. %2$s and %3$s stand for <strong> opening and closing tags' ,'bitz' ), '<br/>', '<strong>', '</strong>'),
        'std'         => '1',
        'type'        => 'select',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => '1',
            'label'       => esc_html__( 'Default', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '2',
            'label'       => esc_html__( 'Menu bar', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '3',
            'label'       => esc_html__( 'Inverse default', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '4',
            'label'       => esc_html__( 'Centred header', 'bitz' ),
            'src'         => '4'
          ),
          array(
            'value'       => '5',
            'label'       => esc_html__( 'Centred header and menu', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '6',
            'label'       => esc_html__( 'Full width menu bar', 'bitz' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'header_bg',
        'label'       => esc_html__( 'Header background color', 'bitz' ),
        'desc'        => esc_html__( 'Choose your site header color.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'header_style:not(2),header_style:not(6)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'header_padding_top',
        'label'       => esc_html__( 'Header padding top', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Set top padding for your header. Please add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>20px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'header_style:not(2),header_style:not(6)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'header_padding_bottom',
        'label'       => esc_html__( 'Header padding bottom', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Set bottom padding for your header. Please add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>20px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'header_style:not(2),header_style:not(6)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'header_custom_css',
        'label'       => esc_html__( 'Custom CSS', 'bitz' ),
        'desc'        => esc_html__( 'Add custom CSS for this header.', 'bitz' ),
        'std'         => '',
        'type'        => 'textarea-simple',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'menu_tab',
        'label'       => esc_html__( 'Menu', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'menu_height',
        'label'       => esc_html__( 'Menu height', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Set menu bar height. Example: %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>60px</code>'),
        'std'         => '50px',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'menu_color',
        'label'       => esc_html__( 'Menu background color', 'bitz' ),
        'desc'        => esc_html__( 'Background color for the menu bar. Leave blank to use theme accent color.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'search_button',
        'label'       => esc_html__( 'Search button in menu', 'bitz' ),
        'desc'        => esc_html__( 'Enables or disables search from menu.', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'cart_button',
        'label'       => esc_html__( 'WooCommerce cart button in menu', 'bitz' ),
        'desc'        => esc_html__( 'Do you want a smart WooCommerce cart icon in main menu?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'default_menu_link',
        'label'       => esc_html__( 'Menu link color', 'bitz' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'bitz' ),
        'std'         => '#ffffff',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'default_menu_link_h',
        'label'       => esc_html__( 'Menu link hover color', 'bitz' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'show_submenu_styles',
        'label'       => esc_html__( 'Show submenu options?', 'bitz' ),
        'desc'        => esc_html__( 'Enable submenu styling.', 'bitz' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'submenu_section_info',
        'label'       => esc_html__( 'Submenu section info', 'bitz' ),
        'desc'        => esc_html__( '<div class="section-title">Submenu options</div>', 'bitz' ),
        'std'         => '',
        'type'        => 'textblock',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'submenu_background',
        'label'       => esc_html__( 'Submenu background color', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Background color for the submenu section. %1$s Leave empty for default color.', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'submenu_link_color',
        'label'       => esc_html__( 'Submenu link color', 'bitz' ),
        'desc'        => esc_html__( 'Color for links in submenu.', 'bitz' ),
        'std'         => '#777777',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'submenu_hover_bg',
        'label'       => esc_html__( 'Submenu item background hover color', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Background color for hovered menu item. %1$s Leave empty for default color.', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => '#f7f7f7',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'megamenu_section_info',
        'label'       => esc_html__( 'Megamenu section info', 'bitz' ),
		'desc'        => '<div class="section-title">'. esc_html__( 'Mega-menu options', 'bitz' ) .'</div>',
        'std'         => '',
        'type'        => 'textblock',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'megamenu_title_color',
        'label'       => esc_html__( 'Megamenu title color', 'bitz' ),
        'desc'        => esc_html__( 'Color for column title inside megamenu.', 'bitz' ),
        'std'         => '#444444',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'megamenu_active_item_color',
        'label'       => esc_html__( 'Megamenu hover &amp; active item color', 'bitz' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'megamenu_separator_color',
        'label'       => esc_html__( 'Megamenu column separator color', 'bitz' ),
        'desc'        => esc_html__( 'Leave empty for default color.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'logo_tab',
        'label'       => esc_html__( 'Logo', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'logo',
        'label'       => esc_html__( 'Logo', 'bitz' ),
        'desc'        => esc_html__( 'Please choose an image file for your logo.', 'bitz' ),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'logo_retina',
        'label'       => esc_html__( 'Logo (Retina version @2x)', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Retina logo should be %s the size of default logo keeping the aspect ratio!', '%s stands for the value. Do not delete it.' ,'bitz' ), '<code>2x</code>'),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'retina_logo_width',
        'label'       => esc_html__( 'Standard logo width', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) logo width. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'bitz' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'retina_logo_height',
        'label'       => esc_html__( 'Standard logo height', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) logo height. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'bitz' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'logo_top',
        'label'       => esc_html__( 'Margin top', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Move your logo vertically with this option. Remember to add %1$s value after the number. For example: %2$s', '%1$s and %2$s stand for example value. Do not delete it.' ,'bitz' ), '<code>px</code>', '<code>25px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'logo_left',
        'label'       => esc_html__( 'Margin left', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Move your logo horizontally with this option. Remember to add %1$s value after the number. For example: %2$s', '%1$s and %2$s stand for example value. Do not delete it.' ,'bitz' ), '<code>px</code>', '<code>25px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar_tab',
        'label'       => esc_html__( 'Top bar', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar',
        'label'       => esc_html__( 'Top bar', 'bitz' ),
        'desc'        => esc_html__( 'Top bar appears above the header. If activated, new widget areas appear in Appearance/Widgets - "Top Bar Sidebar Left" and "Top Bar Sidebar Right".', 'bitz' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar_bg',
        'label'       => esc_html__( 'Background color', 'bitz' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'top_bar:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar_text_color',
        'label'       => esc_html__( 'Text and link color', 'bitz' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'top_bar:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar_link_hover',
        'label'       => esc_html__( 'Link hover color', 'bitz' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'top_bar:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_header_tab',
        'label'       => esc_html__( 'Mobile Header', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_menu_background',
        'label'       => esc_html__( 'Mobile menu background color', 'bitz' ),
        'desc'        => esc_html__( 'Choose background color for mobile menu.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_menu_toggle_color',
        'label'       => esc_html__( 'Mobile menu toggle color', 'bitz' ),
        'desc'        => esc_html__( 'Choose color for mobile menu toggle icon.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_logo',
        'label'       => esc_html__( 'Mobile logo', 'bitz' ),
        'desc'        => esc_html__( 'Please choose an image file for your logo.', 'bitz' ),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_logo_retina',
        'label'       => esc_html__( 'Mobile Logo (Retina version @2x)', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Retina logo should be %s the size of default logo keeping the aspect ratio!', '%s stands for the value. Do not delete it.' ,'bitz' ), '<code>2x</code>'),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_retina_logo_width',
        'label'       => esc_html__( 'Mobile logo width', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) logo width. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'bitz' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_retina_logo_height',
        'label'       => esc_html__( 'Mobile logo height', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) logo height. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'bitz' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'global_color_section',
        'label'       => esc_html__( 'Global', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'body_text_color',
        'label'       => esc_html__( 'Body text color', 'bitz' ),
        'desc'        => esc_html__( 'General color for all body content.', 'bitz' ),
        'std'         => '#333333',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'headings_color',
        'label'       => esc_html__( 'Headings (H1, H2, H3, H4, H5, H6)', 'bitz' ),
        'desc'        => esc_html__( 'Color for heading tags. Applies for all heading elements, if different color is not specified in element styling.', 'bitz' ),
        'std'         => '#2b2b2b',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'link_color',
        'label'       => esc_html__( 'Link color', 'bitz' ),
        'desc'        => esc_html__( 'Global link color.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'link_hover_color',
        'label'       => esc_html__( 'Link hover color', 'bitz' ),
        'desc'        => esc_html__( 'Global link hover color.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'theme_button_color',
        'label'       => esc_html__( 'Theme button color', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Choose color for general theme buttons. %1$s Leave empty for "Theme accent Color"', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'theme_button_hover_color',
        'label'       => esc_html__( 'Theme button hover color', 'bitz' ),
        'desc'        => esc_html__( 'Choose color for theme buttons in hover state.', 'bitz' ),
        'std'         => '#2b2b2b',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'button_text_color',
        'label'       => esc_html__( 'Button Text Color', 'bitz' ),
        'desc'        => esc_html__( 'Text color inside theme buttons.', 'bitz' ),
        'std'         => '#ffffff',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_tab',
        'label'       => esc_html__( 'Sidebar', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_text_color',
        'label'       => esc_html__( 'Text color', 'bitz' ),
        'desc'        => esc_html__( 'Choose text color for sidebar widget content.', 'bitz' ),
        'std'         => '#454545',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_link_color',
        'label'       => esc_html__( 'Link color', 'bitz' ),
        'desc'        => esc_html__( 'Choose color for links in sidebar.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_link_hover_color',
        'label'       => esc_html__( 'Link hover color', 'bitz' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_title_color',
        'label'       => esc_html__( 'Widget title color', 'bitz' ),
        'desc'        => esc_html__( 'Color for widget titles in sidebar.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_divider_color',
        'label'       => esc_html__( 'Widget divider color', 'bitz' ),
        'desc'        => esc_html__( 'Choose border line color separating list items in sidebar.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'misc_color_section',
        'label'       => esc_html__( 'Misc', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'meta_color',
        'label'       => esc_html__( 'Post meta text color', 'bitz' ),
        'desc'        => esc_html__( 'Set color for post meta fields (tags, date, category, author, comments count) on blog index and single post pages.', 'bitz' ),
        'std'         => '#444444',
        'type'        => 'colorpicker',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'custom_fonts_tab',
        'label'       => esc_html__( 'Custom fonts', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'add_google_fonts',
        'label'       => esc_html__( 'Add Google fonts', 'bitz' ),
		'desc'        => sprintf (esc_html_x( '1. Click "Add Google Font". %1$s 2. Choose your font and options. %1$s 3. Save the options. %1$s 4. Assign your new font to elements below.', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => '',
        'type'        => 'google-fonts',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'menu_font',
        'label'       => esc_html__( 'Menu font', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'body_font',
        'label'       => esc_html__( 'Body font', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'heading_font',
        'label'       => esc_html__( 'Heading font', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'single_post_font',
        'label'       => esc_html__( 'Single post font', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'widget_font',
        'label'       => esc_html__( 'Widget title font', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'font_size_tab',
        'label'       => esc_html__( 'Font sizes', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'body_size',
        'label'       => esc_html__( 'Body', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'General body font size. %1$s Remember to add %2$s px %3$s value after the number. For example: %2$s 16px %3$s', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '16px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'single_post_text_font_size',
        'label'       => esc_html__( 'Single post', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Single post content font size. %1$s Remember to add %2$s px %3$s value after the number. For example: %2$s 16px %3$s', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '16px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'menu_font_size',
        'label'       => esc_html__( 'Menu', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'General menu font size. %1$s Remember to add %2$s px %3$s value after the number. For example: %2$s 13px %3$s', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '13px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sub_menu_font_size',
        'label'       => esc_html__( 'Sub menu', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Submenu link font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '13px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h1',
        'label'       => esc_html__( 'H1', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Heading 1 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '30px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h2',
        'label'       => esc_html__( 'H2', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Heading 2 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '24px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h3',
        'label'       => esc_html__( 'H3', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Heading 3 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '20px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h4',
        'label'       => esc_html__( 'H4', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Heading 4 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '18px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h5',
        'label'       => esc_html__( 'H5', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Heading 5 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '16px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h6',
        'label'       => esc_html__( 'H6', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Heading 6 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'bitz' ), '<br/>', '<code>', '</code>'),
        'std'         => '13px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_tab',
        'label'       => esc_html__( 'Footer', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_columns',
        'label'       => esc_html__( 'Column count', 'bitz' ),
        'desc'        => esc_html__( 'Choose column count for your footer.', 'bitz' ),
        'std'         => 'vc_col-sm-3',
        'type'        => 'select',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'vc_col-sm-12',
            'label'       => esc_html__( '1', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => 'vc_col-sm-6',
            'label'       => esc_html__( '2', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => 'vc_col-sm-4',
            'label'       => esc_html__( '3', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => 'vc_col-sm-3',
            'label'       => esc_html__( '4', 'bitz' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'footer_column_1_width',
        'label'       => esc_html__( 'Footer column 1 width', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for first footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>50%</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_columns:not(vc_col-sm-12)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_column_2_width',
        'label'       => esc_html__( 'Footer column 2 width', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for second footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>50%</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_columns:not(vc_col-sm-12)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_column_3_width',
        'label'       => esc_html__( 'Footer column 3 width', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for third footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>50%</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_columns:not(vc_col-sm-12),footer_columns:not(vc_col-sm-6)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_column_4_width',
        'label'       => esc_html__( 'Footer column 4 width', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for fourth footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>50%</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_columns:is(vc_col-sm-3)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_bg',
        'label'       => esc_html__( 'Background', 'bitz' ),
        'desc'        => esc_html__( 'You can either use color or upload a background image. Leave blank for default setting.', 'bitz' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_text_color',
        'label'       => esc_html__( 'Text color', 'bitz' ),
        'desc'        => esc_html__( 'Choose text color for your footer widget content.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_link',
        'label'       => esc_html__( 'Link color', 'bitz' ),
        'desc'        => esc_html__( 'Will apply color to all links located in footer widgets.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_link_hover',
        'label'       => esc_html__( 'Link hover color', 'bitz' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_widget_title',
        'label'       => esc_html__( 'Widget title color', 'bitz' ),
        'desc'        => esc_html__( 'Color for widget titles in footer.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'copyright_tab',
        'label'       => esc_html__( 'Copyright', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'copyright_bg',
        'label'       => esc_html__( 'Background', 'bitz' ),
        'desc'        => esc_html__( 'You can either use color or upload a background image. Leave blank for default setting.', 'bitz' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'copyright_text_color',
        'label'       => esc_html__( 'Text color', 'bitz' ),
        'desc'        => esc_html__( 'Choose text color for your copyright area widget content.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'copyright_link',
        'label'       => esc_html__( 'Link color', 'bitz' ),
        'desc'        => esc_html__( 'Color for links located in your copyright area widgets.', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'copyright_link_hover',
        'label'       => esc_html__( 'Link hover color', 'bitz' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'bitz' ),
        'std'         => '',
        'type'        => 'colorpicker',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_tab',
        'label'       => esc_html__( 'General', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_layout',
        'label'       => esc_html__( 'Post layout', 'bitz' ),
		'desc'        => sprintf (esc_html_x( '1. Full width content %1$s 2. Content / Right sidebar %1$s 3. Content / Left sidebar', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => 'single-right-sidebar.php',
        'type'        => 'radio-image',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'post_header_style_opt',
        'label'       => esc_html__( 'Post header style', 'bitz' ),
		'desc'        => sprintf (esc_html_x( '1. Default style %1$s 2. Default style + featured image in pre-content area by default %1$s 3. Content and sidebar slide up + featured image in pre-content area by default %1$s 4. Content slide up (sidebar remains static) + featured image in pre-content area by default', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => 'style_deafault',
        'type'        => 'radio-image',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_category',
        'label'       => esc_html__( 'Show post category', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display category in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_author',
        'label'       => esc_html__( 'Post author in meta', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display author in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_date',
        'label'       => esc_html__( 'Post date in meta', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display date in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_comments',
        'label'       => esc_html__( 'Comments link in meta', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display comment count in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_links',
        'label'       => esc_html__( 'Previous &amp; next post link', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display next and previous post links on single blog post page?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_tags',
        'label'       => esc_html__( 'Post tags after content', 'bitz' ),
        'desc'        => esc_html__( 'Display post tags on single post page?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'author_description',
        'label'       => esc_html__( 'Post author description after content', 'bitz' ),
        'desc'        => esc_html__( 'When ON, author info box will only appear for those post authors who have "Biographical Info" field filled!', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_views_tab',
        'label'       => esc_html__( 'Post views', 'bitz' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_views_counter',
        'label'       => esc_html__( 'Post views counter', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display view count in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'low_views_count',
        'label'       => esc_html__( 'Low views are below', 'bitz' ),
        'desc'        => esc_html__( 'Define low post view threshold, e.g. 100.', 'bitz' ),
        'std'         => '100',
        'type'        => 'text',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'medium_views_count',
        'label'       => esc_html__( 'Medium views are below', 'bitz' ),
        'desc'        => esc_html__( 'Define medium post view threshold, e.g. 100.', 'bitz' ),
        'std'         => '300',
        'type'        => 'text',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'low_views_color',
        'label'       => esc_html__( 'Low views color', 'bitz' ),
        'desc'        => esc_html__( 'Color for counter when view count is low.', 'bitz' ),
        'std'         => '#c4c4c4',
        'type'        => 'colorpicker',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'medium_views_color',
        'label'       => esc_html__( 'Medium views color', 'bitz' ),
        'desc'        => esc_html__( 'Color for counter when view count is medium.', 'bitz' ),
        'std'         => '#dd9933',
        'type'        => 'colorpicker',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'hot_views_color',
        'label'       => esc_html__( 'Hot views color', 'bitz' ),
        'desc'        => esc_html__( 'Color for counter when view count is high.', 'bitz' ),
        'std'         => '#CB0404',
        'type'        => 'colorpicker',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'archive_post_style',
        'label'       => esc_html__( 'Post style', 'bitz' ),
        'desc'        => esc_html__( 'Choose your post style.', 'bitz' ),
        'std'         => '4',
        'type'        => 'select',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => '1',
            'label'       => esc_html__( 'Centered partial cover', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '2',
            'label'       => esc_html__( 'Right partial cover', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '3',
            'label'       => esc_html__( 'Left partial cover', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '4',
            'label'       => esc_html__( 'Image above content', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '5',
            'label'       => esc_html__( 'Image on the left', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '6',
            'label'       => esc_html__( 'Image on the right', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '7',
            'label'       => esc_html__( 'Image overlay', 'bitz' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'archive_post_layout',
        'label'       => esc_html__( 'Post layout', 'bitz' ),
		'desc'        => sprintf (esc_html_x( '1. One column %1$s 2. Main + two column %1$s 3. Two column', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => 'layout-one-column',
        'type'        => 'radio-image',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'archive_post_style:is(1),archive_post_style:is(2),archive_post_style:is(3),archive_post_style:is(4),archive_post_style:is(7)',
        'operator'    => 'or'
      ),
      array(
        'id'          => 'blog_layout',
        'label'       => esc_html__( 'Blog page layout', 'bitz' ),
		'desc'        => sprintf (esc_html_x( '1. Full width content %1$s 2. Content / Right sidebar %1$s 3. Content / Left sidebar', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => 'right-sidebar',
        'type'        => 'radio-image',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'default_post_image',
        'label'       => esc_html__( 'Default post image', 'bitz' ),
        'desc'        => esc_html__( 'This is the default image applied to all posts that do not have featured image set.', 'bitz' ),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'ot-upload-attachment-id',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_title',
        'label'       => esc_html__( 'Blog title', 'bitz' ),
        'desc'        => esc_html__( 'Choose whether to display or hide blog title.', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_area',
        'label'       => esc_html__( 'Pre-content area', 'bitz' ),
        'desc'        => esc_html__( 'Activates additional area before page title and main content.', 'bitz' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_height',
        'label'       => esc_html__( 'Height (optional)', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Pre-content area height. Example: %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>250px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options child-first',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_pre_content_responsive_height',
        'label'       => esc_html__( 'Responsive height (optional)', 'bitz' ),
        'desc'        => esc_html__( 'Enables auto height in responsive mode.', 'bitz' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_width',
        'label'       => esc_html__( 'Max width (optional)', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Pre-content area max width. Example: %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>1200px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_bg',
        'label'       => esc_html__( 'Background', 'bitz' ),
        'desc'        => esc_html__( 'Set custom background color or image.', 'bitz' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_html',
        'label'       => esc_html__( 'Custom HTML', 'bitz' ),
        'desc'        => esc_html__( 'Insert any custom code you wish. Shortcodes allowed.', 'bitz' ),
        'std'         => '',
        'type'        => 'textarea-simple',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options child-last',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'content_type',
        'label'       => esc_html__( 'Content type', 'bitz' ),
        'desc'        => esc_html__( 'Choose what to display on blog index pages. Note that only \'Full Content\' respects WordPress \'read more\' tag.', 'bitz' ),
        'std'         => 'full_content',
        'type'        => 'select',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'none',
            'label'       => esc_html__( 'None', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => 'excerpt',
            'label'       => esc_html__( 'Excerpt', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => 'full_content',
            'label'       => esc_html__( 'Full content', 'bitz' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'exclude_from_blog',
        'label'       => esc_html__( 'Exclude category from blog', 'bitz' ),
        'desc'        => esc_html__( 'This option will exclude selected category posts from blog and search pages.', 'bitz' ),
        'std'         => '',
        'type'        => 'category-checkbox',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_offset',
        'label'       => esc_html__( 'Offset', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Number of post to displace or pass over. Example (to pass two posts enter): %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>2</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_review_rating',
        'label'       => esc_html__( 'Post review rating (stars)', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display star rating in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_category_blog',
        'label'       => esc_html__( 'Post category in blog meta', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display category in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_author_blog',
        'label'       => esc_html__( 'Post author in blog meta', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display author in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_date_blog',
        'label'       => esc_html__( 'Post date in blog meta', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display date in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_comments_blog',
        'label'       => esc_html__( 'Post comments in blog meta', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display comment count in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_views_counter_blog',
        'label'       => esc_html__( 'Post views counter in blog meta', 'bitz' ),
        'desc'        => esc_html__( 'Do you want to display views count in post meta fields?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'category_styles',
        'label'       => esc_html__( 'Category style', 'bitz' ),
        'desc'        => esc_html__( 'Style any category different from default.', 'bitz' ),
        'std'         => '',
        'type'        => 'list-item',
        'section'     => 'category_style_tab',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'category-styles',
        'condition'   => '',
        'operator'    => 'and',
        'settings'    => array( 
          array(
            'id'          => 'cs_select',
            'label'       => esc_html__( 'Select category', 'bitz' ),
            'desc'        => esc_html__( 'Choose category to style.', 'bitz' ),
            'std'         => '',
            'type'        => 'category-select',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'custom_header',
            'label'       => esc_html__( 'Custom header', 'bitz' ),
            'desc'        => esc_html__( 'Choose custom header.', 'bitz' ),
            'std'         => '',
            'type'        => 'custom-post-type-select',
            'rows'        => '',
            'post_type'   => 'custom_headers',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cs_header_posts',
            'label'       => esc_html__( 'Use selected header in posts under this category', 'bitz' ),
            'desc'        => esc_html__( 'This will apply selected header to posts in this category.', 'bitz' ),
            'std'         => 'off',
            'type'        => 'on-off',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => 'custom_header:not()',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'category_title',
            'label'       => esc_html__( 'Category title', 'bitz' ),
            'desc'        => esc_html__( 'Choose whether to display or hide category page title.', 'bitz' ),
            'std'         => 'on',
            'type'        => 'on-off',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cs_color',
            'label'       => esc_html__( 'Custom accent color for selected category', 'bitz' ),
            'desc'        => esc_html__( 'Choose custom accent color.', 'bitz' ),
            'std'         => '',
            'type'        => 'colorpicker',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cs_color_posts',
            'label'       => esc_html__( 'Use selected accent color in  posts under this category', 'bitz' ),
            'desc'        => esc_html__( 'This will apply your custom accent color to posts in this category.', 'bitz' ),
            'std'         => 'off',
            'type'        => 'on-off',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => 'cs_color:not()',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_post_style',
            'label'       => esc_html__( 'Post style', 'bitz' ),
            'desc'        => esc_html__( 'Choose custom post style.', 'bitz' ),
            'std'         => '',
            'type'        => 'select',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and',
            'choices'     => array( 
              array(
                'value'       => 'default',
                'label'       => esc_html__( 'Default', 'bitz' ),
                'src'         => ''
              ),
              array(
                'value'       => '1',
                'label'       => esc_html__( 'Centered partial cover', 'bitz' ),
                'src'         => ''
              ),
              array(
                'value'       => '2',
                'label'       => esc_html__( 'Right partial cover', 'bitz' ),
                'src'         => ''
              ),
              array(
                'value'       => '3',
                'label'       => esc_html__( 'Left partial cover', 'bitz' ),
                'src'         => ''
              ),
              array(
                'value'       => '4',
                'label'       => esc_html__( 'Image above content', 'bitz' ),
                'src'         => ''
              ),
              array(
                'value'       => '5',
                'label'       => esc_html__( 'Image on the left', 'bitz' ),
                'src'         => ''
              ),
              array(
                'value'       => '6',
                'label'       => esc_html__( 'Image on the right', 'bitz' ),
                'src'         => ''
              ),
              array(
                'value'       => '7',
                'label'       => esc_html__( 'Image overlay', 'bitz' ),
                'src'         => ''
              )
            )
          ),
          array(
            'id'          => 'cat_post_layout',
            'label'       => esc_html__( 'Post layout', 'bitz' ),
			'desc'        => sprintf (esc_html_x( '1. One column %1$s 2. Main + two column %1$s 3. Two column', '%1$s stands for line break' ,'bitz' ), '<br/>'),
            'std'         => 'layout-main',
            'type'        => 'radio-image',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => 'cat_post_style:is(1),cat_post_style:is(2),cat_post_style:is(3),cat_post_style:is(4),cat_post_style:is(7)',
            'operator'    => 'or'
          ),
          array(
            'id'          => 'cat_layout',
            'label'       => esc_html__( 'Category page layout', 'bitz' ),
			'desc'        => sprintf (esc_html_x( '1. Full width content %1$s 2. Content / Right sidebar %1$s 3. Content / Left sidebar', '%1$s stands for line break' ,'bitz' ), '<br/>'),
            'std'         => 'right-sidebar',
            'type'        => 'radio-image',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_offset',
            'label'       => esc_html__( 'Offset', 'bitz' ),
			'desc'        => sprintf (esc_html_x( 'Number of post to displace or pass over. Example (to pass two posts enter): %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>2</code>'),
            'std'         => '',
            'type'        => 'text',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_pre_content_area',
            'label'       => esc_html__( 'Pre-content area', 'bitz' ),
            'desc'        => esc_html__( 'Activates additional area before page title and main content.', 'bitz' ),
            'std'         => 'off',
            'type'        => 'on-off',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_pre_content_height',
            'label'       => esc_html__( 'Height (optional)', 'bitz' ),
			'desc'        => sprintf (esc_html_x( 'Pre-content area height. Example: %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>250px</code>'),
            'std'         => '',
            'type'        => 'text',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options child-first',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          ),
		  array(
            'id'          => 'cat_pre_content_responsive_height',
            'label'       => esc_html__( 'Responsive height (optional)', 'bitz' ),
            'desc'        => esc_html__( 'Enables auto height in responsive mode.', 'bitz' ),
            'std'         => 'off',
            'type'        => 'on-off',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_pre_content_width',
            'label'       => esc_html__( 'Max width (optional)', 'bitz' ),
			'desc'        => sprintf (esc_html_x( 'Pre-content area max width. Example: %s', '%s stands for example value. Do not delete it.' ,'bitz' ), '<code>1200px</code>'),
            'std'         => '',
            'type'        => 'text',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_pre_content_bg',
            'label'       => esc_html__( 'Background', 'bitz' ),
            'desc'        => esc_html__( 'Set custom background color or image.', 'bitz' ),
            'std'         => '',
            'type'        => 'background',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_pre_content_html',
            'label'       => esc_html__( 'Custom HTML', 'bitz' ),
            'desc'        => esc_html__( 'Insert any custom code you wish. Shortcodes are allowed.', 'bitz' ),
            'std'         => '',
            'type'        => 'textarea-simple',
            'rows'        => '10',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options child-last',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          )
        )
      ),
      array(
        'id'          => 'cart_widget',
        'label'       => esc_html__( 'Display cart content on hover', 'bitz' ),
        'desc'        => esc_html__( 'Display cart content on icon hover (ON) or just lead to cart page on click (OFF)?', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'woocommerce',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'cart_button:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'catalog_layout',
        'label'       => esc_html__( 'Product archive page (shop) layout', 'bitz' ),
		'desc'        => sprintf (esc_html_x( '1. Full width content %1$s 2. Content / Right sidebar %1$s 3. Content / Left sidebar', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => 'full-width',
        'type'        => 'radio-image',
        'section'     => 'woocommerce',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'woo_title',
        'label'       => esc_html__( 'WooCommerce product page title', 'bitz' ),
        'desc'        => esc_html__( 'Enable or disable title for main WooCommerce shop page.', 'bitz' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'woocommerce',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'woo_custom_header',
        'label'       => esc_html__( 'Custom HTML after header in WooCommerce product page', 'bitz' ),
        'desc'        => esc_html__( 'Add any custom html content to appear on top of the shop page.', 'bitz' ),
        'std'         => '',
        'type'        => 'textarea-simple',
        'section'     => 'woocommerce',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'product_layout',
        'label'       => esc_html__( 'Single product page layout', 'bitz' ),
		'desc'        => sprintf (esc_html_x( '1. Full width content %1$s 2. Content / Right sidebar %1$s 3. Content / Left sidebar', '%1$s stands for line break' ,'bitz' ), '<br/>'),
        'std'         => 'right-sidebar',
        'type'        => 'radio-image',
        'section'     => 'woocommerce',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'woo_columns',
        'label'       => esc_html__( 'Product column count', 'bitz' ),
        'desc'        => esc_html__( 'Choose column count for main product catalog page.', 'bitz' ),
        'std'         => '4',
        'type'        => 'select',
        'section'     => 'woocommerce',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => '3',
            'label'       => esc_html__( '3 columns', 'bitz' ),
            'src'         => ''
          ),
          array(
            'value'       => '4',
            'label'       => esc_html__( '4 columns', 'bitz' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'woo_product_count',
        'label'       => esc_html__( 'Products per page', 'bitz' ),
        'desc'        => esc_html__( 'Choose how many products to display on product catalog page.', 'bitz' ),
        'std'         => '12',
        'type'        => 'text',
        'section'     => 'woocommerce',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'custom_css',
        'label'       => esc_html__( 'Custom CSS', 'bitz' ),
		'desc'        => sprintf (esc_html_x( 'Add any of your custom CSS here: %1$s %2$s Have fun!', '%1$s stands for line break, %2$s stand for example code' ,'bitz' ), '<br/>', '<pre><code>.page-id-10 #site-header {background: none;}</code></pre>'),
        'std'         => '',
        'type'        => 'textarea-simple',
        'section'     => 'custom_css',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      )
    )
  );
  
  /* allow settings to be filtered before saving */
  $custom_settings = apply_filters( ot_settings_id() . '_args', $custom_settings );
  
  /* settings are not the same update the DB */
  if ( $saved_settings !== $custom_settings ) {
    update_option( ot_settings_id(), $custom_settings ); 
  }
  
  /* Lets OptionTree know the UI Builder is being overridden */
  global $ot_has_custom_theme_options;
  $ot_has_custom_theme_options = true;
  
}